{"version":3,"sources":["components/TodoListContolPanel/TodoListControlPanel.tsx","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoListControlPanel","filterTitle","setFilterTitle","filterComplete","setFilterComplete","randomizeTodos","className","type","value","onChange","target","name","onClick","TodoList","todos","setSelectedUserId","selectedUserId","useState","visibleTodos","setVisibleTodos","useEffect","filter","todo","titleLower","title","toLowerCase","filterLower","includes","completed","randomIndex","result","currentIndex","length","Math","floor","random","map","classNames","readOnly","checked","userId","id","BASE_URL","getTodosFromServer","a","fetch","response","json","getUserFromServer","CurrentUser","clearUser","currentUser","setCurrentUser","isLoadingError","setLoadingError","getUser","newUser","email","phone","App","setTodos","then","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e25535e.chunk.js","sourcesContent":["import React from 'react';\n\nimport './TodoListControlPanel.scss';\n\ntype Props = {\n  filterTitle: string;\n  setFilterTitle: React.Dispatch<React.SetStateAction<string>>;\n  filterComplete: string;\n  setFilterComplete: React.Dispatch<React.SetStateAction<string>>;\n  randomizeTodos: () => void;\n};\n\nexport const TodoListControlPanel: React.FC<Props> = ({\n  filterTitle,\n  setFilterTitle,\n  filterComplete,\n  setFilterComplete,\n  randomizeTodos,\n}) => (\n  <div className=\"TodoList__controlPanel controlPanel\">\n    <label\n      className=\"controlPanel__titleFilter\"\n    >\n      Filter:\n      <input\n        type=\"text\"\n        value={filterTitle}\n        onChange={({ target }) => {\n          setFilterTitle(target.value);\n        }}\n        className=\"controlPanel__titleFilterInput\"\n      />\n    </label>\n\n    <label\n      className=\"controlPanel__comletedFilter\"\n    >\n      Show:\n      <select\n        name=\"visibleGoods\"\n        value={filterComplete}\n        onChange={({ target }) => {\n          setFilterComplete(target.value);\n        }}\n        className=\"controlPanel__comletedFilterSelect\"\n      >\n        <option value=\"all\">\n          All\n        </option>\n\n        <option value=\"active\">\n          Active\n        </option>\n\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n    </label>\n\n    <button\n      type=\"button\"\n      onClick={randomizeTodos}\n      className=\"button\"\n    >\n      Randomize list\n    </button>\n  </div>\n);\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { ToDo } from '../../types/Todo';\nimport { TodoListControlPanel } from '../TodoListContolPanel';\n\ntype Props = {\n  todos: ToDo[];\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>;\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedUserId,\n  selectedUserId,\n}) => {\n  const [filterTitle, setFilterTitle] = useState('');\n  const [filterComplete, setFilterComplete] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  useEffect(() => {\n    setVisibleTodos(todos.filter(todo => {\n      const titleLower = todo.title.toLowerCase();\n      const filterLower = filterTitle.toLowerCase();\n\n      switch (filterComplete) {\n        case 'all':\n          return titleLower.includes(filterLower);\n\n        case 'active':\n          return titleLower.includes(filterLower) && todo.completed === false;\n\n        case 'completed':\n          return titleLower.includes(filterLower) && todo.completed === true;\n\n        default:\n          return todo;\n      }\n    }));\n  }, [filterTitle, filterComplete, todos]);\n\n  const randomizeTodos = () => {\n    const result = [...visibleTodos];\n    let currentIndex = visibleTodos.length;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      [\n        result[currentIndex],\n        result[randomIndex],\n      ] = [\n        result[randomIndex],\n        result[currentIndex],\n      ];\n    }\n\n    setVisibleTodos(result);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <TodoListControlPanel\n        filterTitle={filterTitle}\n        setFilterTitle={setFilterTitle}\n        filterComplete={filterComplete}\n        setFilterComplete={setFilterComplete}\n        randomizeTodos={randomizeTodos}\n      />\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                      selectedUserId === todo.userId,\n                  },\n                  'button',\n                )}\n                type=\"button\"\n                onClick={() => setSelectedUserId(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport { ToDo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodosFromServer = async (): Promise<ToDo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserFromServer = async (id: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${id}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserFromServer } from '../../api/api';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  clearUser,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isLoadingError, setLoadingError] = useState(false);\n\n  const getUser = async () => {\n    try {\n      const newUser = await getUserFromServer(userId);\n\n      setLoadingError(false);\n      setCurrentUser(newUser);\n    } catch {\n      setCurrentUser(null);\n      setLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    getUser();\n  }, [userId]);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {currentUser.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      {isLoadingError && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Loading Error\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            No user data\n          </h3>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosFromServer } from './api/api';\nimport { ToDo } from './types/Todo';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<ToDo[]>([]);\n\n  const clearUser = () => {\n    setSelectedUserId(0);\n  };\n\n  useEffect(() => {\n    getTodosFromServer()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setSelectedUserId={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}