{"version":3,"sources":["components/TodoListContolPanel/TodoListControlPanel.tsx","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoListControlPanel","React","memo","filterTitle","setFilterTitle","filterComplete","setFilterComplete","randomizeTodos","isRandomized","className","type","value","onChange","target","name","onClick","TodoList","todos","setSelectedUserId","selectedUserId","useState","visibleTodos","setVisibleTodos","setRandomized","handleFilter","useCallback","filter","todo","titleLower","title","toLowerCase","filterLower","includes","completed","boolean","randomIndex","result","currentIndex","length","Math","floor","random","useEffect","map","classNames","readOnly","checked","userId","id","BASE_URL","getTodosFromServer","a","fetch","response","json","getUserFromServer","CurrentUser","clearUser","currentUser","setCurrentUser","isLoadingError","setLoadingError","getUser","newUser","email","phone","App","setTodos","then","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"wWAaaA,EAAwCC,IAAMC,MAAK,gBAC9DC,EAD8D,EAC9DA,YACAC,EAF8D,EAE9DA,eACAC,EAH8D,EAG9DA,eACAC,EAJ8D,EAI9DA,kBACAC,EAL8D,EAK9DA,eACAC,EAN8D,EAM9DA,aAN8D,OAQ9D,sBAAKC,UAAU,sCAAf,UACE,wBACEA,UAAU,4BADZ,oBAIE,uBACEC,KAAK,OACLC,MAAOR,EACPS,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXT,EAAeS,EAAOF,QAExBF,UAAU,sCAId,wBACEA,UAAU,+BADZ,kBAIE,yBACEK,KAAK,eACLH,MAAON,EACPO,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXP,EAAkBO,EAAOF,QAE3BF,UAAU,qCANZ,UAQE,wBAAQE,MAAM,MAAd,iBAIA,wBAAQA,MAAM,SAAd,oBAIA,wBAAQA,MAAM,YAAd,6BAMJ,wBACED,KAAK,SACLK,QAAS,kBAAMR,EAAeC,IAC9BC,UAAU,SAHZ,kCCjDSO,EAA4Bf,IAAMC,MAAK,YAI7C,IAHLe,EAGI,EAHJA,MACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,eAEA,EAAsCC,mBAAS,IAA/C,mBAAOjB,EAAP,KAAoBC,EAApB,KACA,EAA4CgB,mBAAS,OAArD,mBAAOf,EAAP,KAAuBC,EAAvB,KACA,EAAwCc,mBAASH,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOZ,EAAP,KAAqBe,EAArB,KAEMC,EAAeC,uBAAY,WAC/BH,EAAgBL,EAAMS,QAAO,SAAAC,GAC3B,IAAMC,EAAaD,EAAKE,MAAMC,cACxBC,EAAc5B,EAAY2B,cAEhC,OAAQzB,GACN,IAAK,MACH,OAAOuB,EAAWI,SAASD,GAE7B,IAAK,SACH,OAAOH,EAAWI,SAASD,KAAmC,IAAnBJ,EAAKM,UAElD,IAAK,YACH,OAAOL,EAAWI,SAASD,KAAmC,IAAnBJ,EAAKM,UAElD,QACE,OAAON,SAGZ,CAACxB,EAAaE,EAAgBY,IAE3BV,EAAiBkB,uBAAY,SAACS,GAClC,GAAIA,EAKF,OAJAZ,EAAgBL,GAChBO,SACAD,GAAc,GAShB,IAJA,IAEIY,EAFEC,EAAM,YAAOf,GACfgB,EAAehB,EAAaiB,OAGR,IAAjBD,GAAoB,CACzBF,EAAcI,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,GAAgB,EAFS,MAOrB,CACFD,EAAOD,GACPC,EAAOC,IAJPD,EAAOC,GALgB,KAMvBD,EAAOD,GANgB,KAa3Bb,EAAgBc,GAChBb,GAAc,KACb,CAACf,EAAca,IAMlB,OAJAqB,qBAAU,WACRlB,MACC,CAACrB,EAAaE,EAAgBY,IAG/B,sBAAKR,UAAU,WAAf,UACE,wCAEA,cAAC,EAAD,CACEN,YAAaA,EACbC,eAAgBA,EAChBC,eAAgBA,EAChBC,kBAAmBA,EACnBC,eAAgBA,EAChBC,aAAcA,IAGhB,qBAAKC,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGY,EAAasB,KAAI,SAAAhB,GAAI,OACpB,qBACElB,UAAWmC,IACT,iBACA,CAAE,0BAA2BjB,EAAKM,WAClC,CAAE,6BAA8BN,EAAKM,YAJzC,UAQE,kCACE,uBACEvB,KAAK,WACLmC,UAAQ,EACRC,QAASnB,EAAKM,YAEhB,4BACGN,EAAKE,WAIV,yBACEpB,UAAWmC,IACT,wBACA,CACE,kCACEzB,IAAmBQ,EAAKoB,QAE5B,UAEFrC,KAAK,SACLK,QAAS,kBAAMG,EAAkBS,EAAKoB,SAVxC,sBAaGpB,EAAKoB,YA1BHpB,EAAKqB,iB,uBChGlBC,EAAW,oCAEJC,EAAkB,uCAAG,4BAAAC,EAAA,sEACTC,MAAM,GAAD,OAAIH,EAAJ,WADI,cAC1BI,EAD0B,yBAGzBA,EAASC,QAHgB,2CAAH,qDAMlBC,EAAiB,uCAAG,WAAOP,GAAP,eAAAG,EAAA,sEACRC,MAAM,GAAD,OAAIH,EAAJ,kBAAsBD,IADnB,cACzBK,EADyB,yBAGxBA,EAASC,QAHe,2CAAH,sDCFjBE,G,MAA+BvD,IAAMC,MAAK,YAGhD,IAFL6C,EAEI,EAFJA,OACAU,EACI,EADJA,UAEA,EAAsCrC,mBAAsB,MAA5D,mBAAOsC,EAAP,KAAoBC,EAApB,KACA,EAA0CvC,oBAAS,GAAnD,mBAAOwC,EAAP,KAAuBC,EAAvB,KAEMC,EAAUrC,sBAAW,sBAAC,4BAAA0B,EAAA,+EAEFI,EAAkBR,GAFhB,OAElBgB,EAFkB,OAIxBF,GAAgB,GAChBF,EAAeI,GALS,gDAOxBJ,EAAe,MACfE,GAAgB,GARQ,yDAUzB,CAACd,IAMJ,OAJAL,qBAAU,WACRoB,MACC,CAACf,IAGF,qCACGW,GACC,sBAAKjD,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,wDACqBiD,EAAYV,QAInC,oBAAIvC,UAAU,oBAAd,SACGiD,EAAY5C,OAGf,mBAAGL,UAAU,qBAAb,SACGiD,EAAYM,QAGf,mBAAGvD,UAAU,qBAAb,SACGiD,EAAYO,QAGf,wBACEvD,KAAK,SACLD,UAAU,qBACVM,QAAS0C,EAHX,sBAUHG,GACC,sBAAKnD,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,mDAKF,oBAAIA,UAAU,oBAAd,oCCtBKyD,EA3CO,WACpB,MAGI9C,mBAAS,GAHb,mBACED,EADF,KAEED,EAFF,KAKA,EAA0BE,mBAAiB,IAA3C,mBAAOH,EAAP,KAAckD,EAAd,KAEMV,EAAYhC,uBAAY,WAC5BP,EAAkB,KACjB,IASH,OAPAwB,qBAAU,WACRQ,IACGkB,MAAK,SAAAC,GACJF,EAASE,QAEZ,IAGD,sBAAK5D,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEQ,MAAOA,EACPC,kBAAmBA,EACnBC,eAAgBA,MAIpB,qBAAKV,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGU,EACC,cAAC,EAAD,CACE4B,OAAQ5B,EACRsC,UAAWA,IAEX,2BCzCda,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4f72af99.chunk.js","sourcesContent":["import React from 'react';\n\nimport './TodoListControlPanel.scss';\n\ntype Props = {\n  filterTitle: string;\n  setFilterTitle: React.Dispatch<React.SetStateAction<string>>;\n  filterComplete: string;\n  setFilterComplete: React.Dispatch<React.SetStateAction<string>>;\n  randomizeTodos: (boolean: boolean) => void;\n  isRandomized: boolean;\n};\n\nexport const TodoListControlPanel: React.FC<Props> = React.memo(({\n  filterTitle,\n  setFilterTitle,\n  filterComplete,\n  setFilterComplete,\n  randomizeTodos,\n  isRandomized,\n}) => (\n  <div className=\"TodoList__controlPanel controlPanel\">\n    <label\n      className=\"controlPanel__titleFilter\"\n    >\n      Filter:\n      <input\n        type=\"text\"\n        value={filterTitle}\n        onChange={({ target }) => {\n          setFilterTitle(target.value);\n        }}\n        className=\"controlPanel__titleFilterInput\"\n      />\n    </label>\n\n    <label\n      className=\"controlPanel__comletedFilter\"\n    >\n      Show:\n      <select\n        name=\"visibleGoods\"\n        value={filterComplete}\n        onChange={({ target }) => {\n          setFilterComplete(target.value);\n        }}\n        className=\"controlPanel__comletedFilterSelect\"\n      >\n        <option value=\"all\">\n          All\n        </option>\n\n        <option value=\"active\">\n          Active\n        </option>\n\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n    </label>\n\n    <button\n      type=\"button\"\n      onClick={() => randomizeTodos(isRandomized)}\n      className=\"button\"\n    >\n      Randomize list\n    </button>\n  </div>\n));\n","/* eslint-disable no-console */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { ToDo } from '../../types/Todo';\nimport { TodoListControlPanel } from '../TodoListContolPanel';\n\ntype Props = {\n  todos: ToDo[];\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>;\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  setSelectedUserId,\n  selectedUserId,\n}) => {\n  const [filterTitle, setFilterTitle] = useState('');\n  const [filterComplete, setFilterComplete] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [isRandomized, setRandomized] = useState(false);\n\n  const handleFilter = useCallback(() => {\n    setVisibleTodos(todos.filter(todo => {\n      const titleLower = todo.title.toLowerCase();\n      const filterLower = filterTitle.toLowerCase();\n\n      switch (filterComplete) {\n        case 'all':\n          return titleLower.includes(filterLower);\n\n        case 'active':\n          return titleLower.includes(filterLower) && todo.completed === false;\n\n        case 'completed':\n          return titleLower.includes(filterLower) && todo.completed === true;\n\n        default:\n          return todo;\n      }\n    }));\n  }, [filterTitle, filterComplete, todos]);\n\n  const randomizeTodos = useCallback((boolean: boolean) => {\n    if (boolean) {\n      setVisibleTodos(todos);\n      handleFilter();\n      setRandomized(false);\n\n      return;\n    }\n\n    const result = [...visibleTodos];\n    let currentIndex = visibleTodos.length;\n    let randomIndex: number;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      [\n        result[currentIndex],\n        result[randomIndex],\n      ] = [\n        result[randomIndex],\n        result[currentIndex],\n      ];\n    }\n\n    setVisibleTodos(result);\n    setRandomized(true);\n  }, [isRandomized, visibleTodos]);\n\n  useEffect(() => {\n    handleFilter();\n  }, [filterTitle, filterComplete, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <TodoListControlPanel\n        filterTitle={filterTitle}\n        setFilterTitle={setFilterTitle}\n        filterComplete={filterComplete}\n        setFilterComplete={setFilterComplete}\n        randomizeTodos={randomizeTodos}\n        isRandomized={isRandomized}\n      />\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                      selectedUserId === todo.userId,\n                  },\n                  'button',\n                )}\n                type=\"button\"\n                onClick={() => setSelectedUserId(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","/* eslint-disable no-console */\nimport { ToDo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodosFromServer = async (): Promise<ToDo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserFromServer = async (id: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${id}`);\n\n  return response.json();\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUserFromServer } from '../../api/api';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = React.memo(({\n  userId,\n  clearUser,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isLoadingError, setLoadingError] = useState(false);\n\n  const getUser = useCallback(async () => {\n    try {\n      const newUser = await getUserFromServer(userId);\n\n      setLoadingError(false);\n      setCurrentUser(newUser);\n    } catch {\n      setCurrentUser(null);\n      setLoadingError(true);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    getUser();\n  }, [userId]);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {currentUser.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      {isLoadingError && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Loading Error\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            No user data\n          </h3>\n        </div>\n      )}\n    </>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosFromServer } from './api/api';\nimport { ToDo } from './types/Todo';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<ToDo[]>([]);\n\n  const clearUser = useCallback(() => {\n    setSelectedUserId(0);\n  }, []);\n\n  useEffect(() => {\n    getTodosFromServer()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setSelectedUserId={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}